#!/usr/bin/env python3

import argparse
import configparser
import sys
import os
import subprocess
import glob

from pathlib import Path

__global_config_file = Path.home().joinpath(".config/mgkhelper.conf")

class KhelperConfig:
    def __init__(
            self,
            kernel_dir: Path,
            busybox_dir: Path,
            vm_dir: Path
    ) -> None:
        self.kernel_dir = kernel_dir
        self.busybox_dir = busybox_dir
        self.vm_dir = vm_dir

# General utility functions
        
def list_str(values: list):
    return values.split(',')

def prompt_yes_no(prompt: str, default: bool = True) -> bool:
    prompt += " [Y/n] " if default else " [y/N] "
    sys.stderr.write(prompt)
    sys.stderr.flush()
    answer = input().strip().lower()
    if answer.startswith("y"):
        return True
    elif answer.startswith("n"):
        return False
    else:
        return default

def run_subprocess_in_dir(commands: list, working_dir: Path) -> None:
    for cmd in commands:
        print(f"[INFO] Executing command '{cmd}' in directory '{working_dir}'")
        try:
            subprocess.run(cmd, cwd=working_dir,  check=True, shell=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] Got an error executing command: {cmd}")
            print(f"[ERROR] Error output: {e.output}")
            exit(1)

# Configuration file related utility functions
    
def get_khelper_config() -> KhelperConfig:
    config = configparser.ConfigParser()
    if not __global_config_file.exists():
        print(f"Configuration file '~/.config/mgkhelper.conf' not found.")
        if prompt_yes_no("Do you want to go with the default one?"):
            return KhelperConfig(
                Path.home().joinpath("sources/linux"),
                Path.home().joinpath("sources/busybox"),
                Path.home().joinpath("sources/vm"),
            )
    else:
        config.read(__global_config_file)
        return KhelperConfig(
            kernel_dir=config['Paths']['kerneldir'],
            busybox_dir=config['Paths']['busyboxdir'],
            vm_dir=config['Paths']['vmdir']
        )
    
# Kernel related utility functions

def enable_lsp_support(khelper_config: KhelperConfig) -> None:
    commands = [
        "./scripts/clang-tools/gen_compile_commands.py"
    ]
    print(f"[INFO] Enabling LSP support in the kernel directory {khelper_config.kernel_dir}")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)
            
def build_k_x64(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = []
    if args.commands_hook != None:
        commands.append(args.commands_hook)
    config_commands = [
        "/usr/bin/make CC=clang defconfig",
        "/usr/bin/make CC=clang kvm_guest.config",
    ]
    for cmd in config_commands:
        commands.append(cmd)
    custom_config_commands = [
        "./scripts/config --set-val CONFIG_DEBUG_INFO y",
        "./scripts/config --set-val CONFIG_DEBUG_KERNEL y",
        "./scripts/config --set-val CONFIG_CC_OPTIMIZE_FOR_DEBUGGING y",
        "./scripts/config --set-val CONFIG_GDB_SCRIPTS y",
        "./scripts/config --set-val CONFIG_DEBUG_INFO_REDUCED n",
        "./scripts/config --set-val DEBUG_INFO_DWARF4 y",
        "./scripts/config --set-val CONFIG_FRAME_POINTER y",
        "./scripts/config --set-val CONFIG_CMDLINE_BOOL y",
        "./scripts/config --set-val CONFIG_RANDOMIZE_BASE n",
        "./scripts/config --set-val CONFIG_CHECKPOINT_RESTORE y",
        "./scripts/config --set-val CONFIG_DEBUG_INFO_NONE n",
    ]
    for cmd in custom_config_commands:
        commands.append(cmd)
    if args.syzkaller_enable:
        syzkaller_config_commands = [
            "./scripts/config --set-val CONFIG_KCOV y",
            "./scripts/config --set-val CONFIG_DEBUG_INFO_DWARF4 y",
            "./scripts/config --set-val CONFIG_CONFIGFS_FS y",
            "./scripts/config --set-val CONFIG_SECURITYFS y",
            "./scripts/config --set-val CONFIG_KASAN y",
            "./scripts/config --set-val CONFIG_KASAN_INLINE y",
            "./scripts/config --set-val CONFIG_CMDLINE \"net.ifnames=0\"",            
        ]
        for cmd in syzkaller_config_commands:
            commands.append(cmd)
    if args.utils_enable:        
        utils_commands = [
            "./scripts/config --set-val CONFIG_NET_9P y",
            "./scripts/config --set-val CONFIG_NET_9P_DEBUG y",
            "./scripts/config --set-val CONFIG_9P_FS y",
            "./scripts/config --set-val CONFIG_9P_FS_POSIX_ACL y",
            "./scripts/config --set-val CONFIG_9P_FS_SECURITY y",
            "./scripts/config --set-val CONFIG_NET_9P_VIRTIO y",
            "./scripts/config --set-val CONFIG_VIRTIO_BLK_SCSI y",
            "./scripts/config --set-val CONFIG_HW_RANDOM_VIRTIO y",
            "./scripts/config --set-val CONFIG_VIRTIO_PCI_LEGACY y",
            "./scripts/config --set-val CONFIG_CRYPTO_DEV_VIRTIO y",
            "./scripts/config --set-val CONFIG_BALLOON_COMPACTION y",
            "./scripts/config --set-val CONFIG_PCI_HOST_GENERIC y",
        ]
        for cmd in utils_commands:
            commands.append(cmd)
    if args.ebpf_enable:
        ebpf_config_commands = [
            "./scripts/config --set-val CONFIG_BPF y",
            "./scripts/config --set-val CONFIG_BPF_SYSCALL y",
            "./scripts/config --set-val CONFIG_BPF_JIT y",
            "./scripts/config --set-val CONFIG_HAVE_EBPF_JIT y",
            "./scripts/config --set-val CONFIG_BPF_EVENTS y",
            "./scripts/config --set-val CONFIG_FTRACE_SYSCALLS y",
            "./scripts/config --set-val CONFIG_FUNCTION_TRACER y",
            "./scripts/config --set-val CONFIG_HAVE_DYNAMIC_FTRACE y",
            "./scripts/config --set-val CONFIG_DYNAMIC_FTRACE y",
            "./scripts/config --set-val CONFIG_HAVE_KPROBES y",
            "./scripts/config --set-val CONFIG_KPROBES y",
            "./scripts/config --set-val CONFIG_KPROBE_EVENTS y",
            "./scripts/config --set-val CONFIG_ARCH_SUPPORTS_UPROBES y",
            "./scripts/config --set-val CONFIG_UPROBES y",
            "./scripts/config --set-val CONFIG_UPROBE_EVENTS y",
            "./scripts/config --set-val CONFIG_DEBUG_FS y",
        ]
        for cmd in ebpf_config_commands:
            commands.append(cmd)
    if args.config_only:
        run_subprocess_in_dir(commands, khelper_config.kernel_dir)
        return
    compile_commands = [
        "/usr/bin/make CC=clang olddefconfig",
        "/usr/bin/make CC=clang scripts_gdb",
        "/usr/bin/make WERROR=0 CC=clang -j`nproc` all",
    ]
    for cmd in compile_commands:
        commands.append(cmd)
    print(f"[INFO] Building the kernel located at {khelper_config.kernel_dir} with x86_64 config")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def build_k_i386(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "/usr/bin/make CC=clang i386_defconfig",
        "/usr/bin/make CC=clang -j`nproc` all",
        "/usr/bin/make CC=clang ARCH=x86 cscope",
    ]
    print(f"[INFO] Building the kernel located at {khelper_config.kernel_dir} with i386 config")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def build_k(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.kernel_dir != None:
        khelper_config.kernel_dir = args.kernel_dir
    match args.arch:
        case 'x86':
            build_k_i386(args, khelper_config)
        case 'x86-64':
            build_k_x64(args, khelper_config)
        case _:
            print(f'[ERROR] Architecture not supported yet!')
            exit(1)
    if args.lsp_enable:
        enable_lsp_support(khelper_config)

def clean_k(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.kernel_dir != None:
        khelper_config.kernel_dir = args.kernel_dir
    commands = [
        "/usr/bin/make CC=clang clean"
    ]
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def build_fs_i386(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    return 0

def build_fs_x64(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "/usr/bin/mkdir -p /tmp/staging",
        "/usr/bin/make CC=clang defconfig",
        "/usr/bin/make CC=clang LDFLAGS=\"--static\" -j`nproc` install",
        "/usr/bin/mkdir -p /tmp/staging/initramfs/fs",
    ]
    run_subprocess_in_dir(commands, khelper_config.busybox_dir)
    commands = [
        "/usr/bin/mkdir -pv bin sbin etc proc sys tmp usr/bin usr/sbin",
        ("/usr/bin/cp -av " + " ".join(glob.glob(str(khelper_config.busybox_dir) + "/_install/*")) +  " ."),
        "/usr/bin/cp ~/tools/mg-linux/scripts/init ."
    ]
    if (args.include != None):
        for curr_file in args.include:
            curr = Path(curr_file)
            if not curr.exists():
                print("[WARNING] Provided file '{str(curr)}' does not exist, skipping it")
            else:
                commands.append("/usr/bin/cp " + str(curr) + " .")
    commands.append("/usr/bin/find . -print0 | cpio --null -ov --format=newc | gzip -9 > /tmp/staging/initramfs-busybox-x86.cpio.gz")
    run_subprocess_in_dir(commands, Path("/tmp/staging/initramfs/fs"))
    
def build_fs(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.busybox_dir != None:
        khelper_config.busybox_dir = args.busybox_dir
    match args.arch:
        case 'x86':
            build_fs_i386(args, khelper_config)
        case 'x86-64':
            build_fs_x64(args, khelper_config)
        case _:
            print(f'[ERROR] Architecture not supported yet!')
            exit(1)

def launch_k_x64(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.kernel_image == None:
        args.kernel_image = khelper_config.kernel_dir.joinpath("/arch/x86_64/boot/bzImage")
    if args.debug:
        commands = [
            "qemu-system-x86_64 -s -m 512 -kernel " + str(args.kernel_image) + " -initrd " + str(args.file_system) + " -append \"console=ttyS0 init=/init nokaslr nosmp\" -k en-us -nographic"
        ]
    else:
        commands = [
            "qemu-system-x86_64 -cpu qemu64,+smep,+smap -smp 2 -m 512 -kernel " + str(args.kernel_image) + " -initrd " + str(args.file_system) + " -append \"console=ttyS0 init=/init\" -k en-us -nographic"
        ]        
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)
    
def launch_k_i386(khelper_config: KhelperConfig, with_lsp: bool) -> None:
    return 0
            
def launch_k(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    match args.arch:
        case 'x86':
            launch_k_i386(args, khelper_config)
        case 'x86-64':
            launch_k_x64(args, khelper_config)
        case _:
            assert False, "Unreachable code; are you messing up with the memory?"
            
def gdb_run(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.kernel_image == None:
        commands = [
            "gdb -ex 'target remote localhost:" + str(args.port) + "'"
        ]
    else:
        commands = [
            "gdb -ex 'target remote localhost:" + str(args.port) + "' " + str(args.kernel_image.absolute())
        ]
    run_subprocess_in_dir(commands, Path().cwd())

def compress_initramfs(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "find . -print0 | cpio --null -ov --format=newc | gzip -9 > " + str(args.output_file)
        ]
    run_subprocess_in_dir(commands, args.initramfs)

def decompress_initramfs(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if os.getuid() != 0:
        print(f"[ERROR] To decompress an initramfs file, `khelper` uses `cpio -idm`, which requires root privileges, try again!")
        exit(1)
    if str(args.initramfs).endswith(".gz"):
        if not args.output_directory.exists():
            commands = [
                "mkdir -p " + str(args.output_directory)
            ]
            run_subprocess_in_dir(commands, Path.cwd())
        commands = [
            "cp " + str(args.initramfs) + " ./initramfs.cpio.gz",
            "gunzip ./initramfs.cpio.gz"
        ]
        run_subprocess_in_dir(commands, args.output_directory.parent)
        commands = [
            "cpio -idm < ../initramfs.cpio",
            "rm ../initramfs.cpio",
        ]
        run_subprocess_in_dir(commands, args.output_directory)
    elif str(args.initramfs).endswith(".cpio"):
        if not args.output_directory.exists():
            commands = [
                "mkdir -p " + str(args.output_directory)
            ]
            run_subprocess_in_dir(commands, Path.cwd())
        commands = [
            "cpio -idm < " + str(args.initramfs),
        ]
        run_subprocess_in_dir(commands, args.output_directory)
    else:
        print(f"[ERROR] Unrecognized extension for a compressed initramfs")
        exit(1)
    commands = [
        "chown -R claudio:claudio ./initramfs",
        "chown claudio:claudio ./initramfs"
    ]
    run_subprocess_in_dir(commands, args.output_directory.parent)

def decompress_image(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "./scripts/extract-vmlinux " + str(args.image) + " > " + str(args.target_image.absolute())
    ]
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def compile_and_compress_exploit(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if not str(args.exploit).endswith(".c"):
        print(f"[ERROR] The exploit source file provided is not a `.c` file")
        exit(1)
    commands = [
        "clang -o " + str(args.initramfs.joinpath("exploit")) + " -static " + str(args.exploit),
        "cp " + str(args.initramfs.joinpath("exploit")) + " " + str(args.exploit.parent)
    ]
    run_subprocess_in_dir(commands, args.initramfs)
    compress_initramfs(args, khelper_config)

def qemu_run(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.filesystem_share == None:
        commands = [
            "qemu-system-x86_64 -s -M pc -kernel " +
            str(args.image) +
            " -drive file=" +
            str(args.fs) +
            ",if=virtio,format=raw" +
            " -append \"rootwait root=/dev/vda console=tty1 console=ttyS0 nokaslr\"" +
            " -net nic,model=virtio -net user -serial stdio"
        ]        
    else:
        commands = [
            "qemu-system-x86_64 -s -M pc -kernel " +
            str(args.image) +
            " -drive file=" +
            str(args.fs) +
            ",if=virtio,format=raw" +
            " -fsdev local,security_model=passthrough,id=fsdev0,path="
            + str(args.filesystem_share) +
            " -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare" +
            " -append \"rootwait root=/dev/vda console=tty1 console=ttyS0 nokaslr\"" +
            " -net nic,model=virtio -net user -serial stdio"
        ]
    run_subprocess_in_dir(commands, Path().cwd())

def bootstrap_run(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "truncate -s " + args.size + " " + str(args.image),
        "mkfs.ext4 " + str(args.image),
        "mkdir mnt",
        "sudo mount " + str(args.image) + " mnt",
        "sudo pacstrap mnt base base-devel",
        "sudo arch-chroot mnt",
    ]
    run_subprocess_in_dir(commands, args.image.parent)

def main() -> None:
    parser = argparse.ArgumentParser(
        prog="khelper",
        description="`khelper` is a kernel helper that I use to automate some compilation and running tasks in my daily work with the Linux kernel.")

    subparsers = parser.add_subparsers(
        title="command", description="command to run", dest="command")

    parser_build = subparsers.add_parser(
        "build",
        help="Build a Linux kernel either specified in the khelper configuration file or provided as command line argument",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_build.add_argument("arch", help="Target architecture for which we want to build the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_build.add_argument("-lsp", "--lsp-enable", help="Enable LSP support when building the kernel", action="store_true")
    parser_build.add_argument("-syzkaller", "--syzkaller-enable", help="Enable `syzkaller` support when building the kernel", action="store_true")
    parser_build.add_argument("-ebpf", "--ebpf-enable", help="Enable `eBPF` support when building the kernel", action="store_true")
    parser_build.add_argument("-utils", "--utils-enable", help="Enable support for some utility functionalities such as `virtio` when building the kernel", action="store_true")
    parser_build.add_argument("-d", "--kernel-dir", help="Use a different kernel source directory instead of the one specified in the khelper config file", type=Path)
    parser_build.add_argument("-c", "--commands-hook", help="Series of commands to execute in the kernel directory before compiling", type=str)
    parser_build.add_argument("--config-only", help="Launch the `khelper` command just to create the kernel config", action="store_true")
    parser_build.set_defaults(func=build_k)

    parser_clean = subparsers.add_parser(
        "clean",
        help="Clean a Linux kernel either specified in the khelper configuration file or provided as command line argument",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_clean.add_argument("-d", "--kernel-dir", help="Use a different kernel source directory instead of the one specified in the khelper config file", type=Path)
    parser_clean.add_argument("-c", "--commands-hook", help="Series of commands to execute in the kernel directory before cleaning", type=str)
    parser_clean.set_defaults(func=clean_k)

    parser_initramfs = subparsers.add_parser(
        "initramfs",
        help="Build the file system with the Busybox source specified either in the khelper configuration file or as a command line argument",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_initramfs.add_argument("arch", help="Target architecture for which we want to build the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_initramfs.add_argument("-i", "--include", help="List of comma-separated files to include in the initramfs", type=list_str)
    parser_initramfs.add_argument("-d", "--busybox-dir", help="Use a different busybox source instead of the one specified in the khelper configuration file", type=Path)
    parser_initramfs.set_defaults(func=build_fs)

    parser_run = subparsers.add_parser(
        "launch",
        help="Launch the Linux kernel environment using QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_run.add_argument("arch", help="Target architecture for which we want to run the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_run.add_argument("-s","--debug", help="Launch QEMU with the `-s` option to allow `gdb` to connect", action="store_true")
    parser_run.add_argument("-k", "--kernel-image", help="Target kernel image (i.e., bzImage) to run in QEMU", type=Path)
    parser_run.add_argument("-f", "--file-system", help="Target compressed initramfs used to run the kernel in QEMU", type=Path, default=Path("/tmp/staging/initramfs-busybox-x86.cpio.gz"))
    parser_run.set_defaults(func=launch_k)

    parser_gdb = subparsers.add_parser(
        "gdb",
        help="Launch `gdb` to debug the Linux kernel running in QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_gdb.add_argument("-k", "--kernel-image", help="Target kernel image used for symbols", type=Path)
    parser_gdb.add_argument("-p","--port", help="Port used by `gdb` to connect to the running QEMU instance", type=str, default="1234")
    parser_gdb.set_defaults(func=gdb_run)

    parser_initramfs_decompress = subparsers.add_parser(
        "initramfs-decompress",
        help="Decompress an initramfs file into a standard directory",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_initramfs_decompress.add_argument("initramfs", help="Initramfs file to be decompressed", type=Path)
    parser_initramfs_decompress.add_argument("-o", "--output-directory", help="The directory where to decompress the initramfs in input", type=Path, default=Path("."))
    parser_initramfs_decompress.set_defaults(func=decompress_initramfs)

    parser_initramfs_compress = subparsers.add_parser(
        "initramfs-compress",
        help="Comprsss an initramfs directory into a .gz file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_initramfs_compress.add_argument("initramfs", help="Initramfs directory to be compressed", type=Path)
    parser_initramfs_compress.add_argument("-o", "--output-file", help="The path of the output initramfs in compressed form", type=Path, default=Path("/tmp/staging/initramfs-busybox-x86.cpio.gz"))
    parser_initramfs_compress.set_defaults(func=compress_initramfs)

    parser_image_decompress = subparsers.add_parser(
        "image-decompress",
        help="Decompress a bzImage/vmlinuz file to its vmlinux form",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_image_decompress.add_argument("image", help="`vmlinuz`/`bzImage` file to be decompressed", type=Path)
    parser_image_decompress.add_argument("-o", "--target-image", help="The path where to decompress the kernel image in input", type=Path, default=Path("."))
    parser_image_decompress.set_defaults(func=decompress_image)

    parser_exploit_compile_compress = subparsers.add_parser(
        "compile-exploit-compress",
        help="Compile a kernel exploit in `.c` form and include it in the initramfs",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_exploit_compile_compress.add_argument("exploit", help="The exploit in `.c` format to compile", type=Path)
    parser_exploit_compile_compress.add_argument("arch", help="Target architecture for which we want to compile the exploit", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_exploit_compile_compress.add_argument("initramfs", help="The initramfs directory where we want to include the exploit", type=Path)
    parser_exploit_compile_compress.add_argument("-o", "--output-file", help="The path of the output initramfs in compressed form", type=Path, default=Path("/tmp/staging/initramfs-busybox-x86.cpio.gz"))
    parser_exploit_compile_compress.set_defaults(func=compile_and_compress_exploit)

    parser_qemu_run = subparsers.add_parser(
        "qemu",
        help="Just a wrapper to run QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_qemu_run.add_argument("image", help="The target kernel image", type=Path)
    parser_qemu_run.add_argument("fs", help="The target initramfs", type=Path)
    parser_qemu_run.add_argument("-d","--filesystem-share", help="The directory to share with QEMU using `virtio`")
    parser_qemu_run.set_defaults(func=qemu_run)

    parser_bootstrap = subparsers.add_parser(
        "bootstrap",
        help="Create a minimal distribution image with Arch Linux to run in QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_bootstrap.add_argument("image", help="The path of the output raw image", type=Path)
    parser_bootstrap.add_argument("-s", "--size", help="The size the image will have", default="20G", type=str)
    parser_bootstrap.add_argument("-i", "--packages-include", help="List of comma-separated packages to include in the minimal distro image", type=list_str)
    parser_bootstrap.set_defaults(func=bootstrap_run)

    if len(sys.argv) == 1:
        parser.print_help()
        parser.exit()

    args = parser.parse_args()
    args.func(args, get_khelper_config())

if __name__ == "__main__":
    main()
