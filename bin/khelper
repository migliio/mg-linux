#!/usr/bin/env python3

import argparse
import configparser
import sys
import os
import subprocess
import glob

from pathlib import Path

__global_config_file = Path.home().joinpath(".config/mgkhelper.conf")

class KhelperConfig:
    def __init__(
            self,
            kernel_dir: Path,
            busybox_dir: Path,
            vm_dir: Path
    ) -> None:
        self.kernel_dir = kernel_dir
        self.busybox_dir = busybox_dir
        self.vm_dir = vm_dir

def list_str(values):
    return values.split(',')

def prompt_yes_no(prompt: str, default: bool = True) -> bool:
    prompt += " [Y/n] " if default else " [y/N] "
    sys.stderr.write(prompt)
    sys.stderr.flush()
    answer = input().strip().lower()
    if answer.startswith("y"):
        return True
    elif answer.startswith("n"):
        return False
    else:
        return default

# Configuration file related utility functions
    
def get_khelper_config() -> KhelperConfig:
    config = configparser.ConfigParser()
    if not __global_config_file.exists():
        print(f"Configuration file '~/.config/mgkhelper.conf' not found.")
        if prompt_yes_no("Do you want to go with the default one?"):
            return KhelperConfig(
                kernel_dir=Path("/home/claudio/sources/linux"),
                busybox_dir=Path("/home/claudio/sources/busybox"),
                vm_dir=Path("/home/claudio/sources/vm")
            )
    else:
        config.read(__global_config_file)
        return KhelperConfig(
            kernel_dir=config['Paths']['kerneldir'],
            busybox_dir=config['Paths']['busyboxdir'],
            vm_dir=config['Paths']['vmdir']
        )
    
# Kernel related utility functions

def run_subprocess_in_dir(commands: list, working_dir: Path) -> None:
    for cmd in commands:
        print(f"[INFO] Executing command '{cmd}' in directory '{working_dir}'")
        try:
            subprocess.run(cmd, cwd=working_dir,  check=True, shell=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] Got an error executing command: {cmd}")
            print(f"[ERROR] Error output: {e.output}")
            exit(1)

def enable_lsp_support(khelper_config: KhelperConfig) -> None:
    commands = [
        "./scripts/clang-tools/gen_compile_commands.py"
    ]
    print(f"[INFO] Enabling LSP support in the kernel directory {khelper_config.kernel_dir}")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)
            
def build_k_x64(khelper_config: KhelperConfig) -> None:
    commands = [
        "/usr/bin/make CC=clang defconfig",
        "/usr/bin/make CC=clang kvm_guest.config",
        "./scripts/config --set-val CONFIG_DEBUG_INFO y",
        "./scripts/config --set-val CONFIG_KCOV y",
        "./scripts/config --set-val CONFIG_DEBUG_INFO_DWARF4 y",
        "./scripts/config --set-val CONFIG_KASAN y",
        "./scripts/config --set-val CONFIG_KASAN_INLINE y",
        "./scripts/config --set-val CONFIG_CONFIGFS_FS y",
        "./scripts/config --set-val CONFIG_SECURITYFS y",
        "./scripts/config --set-val CONFIG_CMDLINE_BOOL y",
        "./scripts/config --set-val CONFIG_CMDLINE \"net.ifnames=0\"",
        "/usr/bin/make CC=clang olddefconfig",
        "/usr/bin/make CC=clang -j`nproc` all"
    ]
    print(f"[INFO] Building the kernel located at {khelper_config.kernel_dir} with x86_64 config")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def build_k_i386(khelper_config: KhelperConfig) -> None:
    commands = [
        "/usr/bin/make CC=clang i386_defconfig",
        "/usr/bin/make CC=clang -j`nproc` all"
    ]
    print(f"[INFO] Building the kernel located at {khelper_config.kernel_dir} with i386 config")
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def build_k(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    match args.arch:
        case 'x86':
            build_k_i386(khelper_config)
        case 'x86-64':
            build_k_x64(khelper_config)
        case _:
            print(f'[ERROR] Architecture not supported yet!')
            exit(1)
    if args.lsp_enable:
        enable_lsp_support(khelper_config)

def build_fs_i386(khelper_config: KhelperConfig) -> None:
    return 0

def build_fs_x64(khelper_config: KhelperConfig) -> None:
    commands = [
        "/usr/bin/mkdir -p /tmp/staging",
        "/usr/bin/make CC=clang defconfig",
        "/usr/bin/make CC=clang LDFLAGS=\"--static\" -j`nproc` install",
        "/usr/bin/mkdir -p /tmp/staging/initramfs/fs",
    ]
    run_subprocess_in_dir(commands, khelper_config.busybox_dir)
    commands = [
        "/usr/bin/mkdir -pv bin sbin etc proc sys usr/bin usr/sbin",
        ("/usr/bin/cp -av " + " ".join(glob.glob(str(khelper_config.busybox_dir) + "/_install/*")) +  " ."),
        "/usr/bin/cp ~/tools/mg-linux/scripts/init .",
        "/usr/bin/find . -print0 | cpio --null -ov --format=newc | gzip -9 > /tmp/staging/initramfs-busybox-x86.cpio.gz",
    ]
    run_subprocess_in_dir(commands, Path("/tmp/staging/initramfs/fs"))
    
def build_fs(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    match args.arch:
        case 'x86':
            build_fs_i386(khelper_config)
        case 'x86-64':
            build_fs_x64(khelper_config)
        case _:
            print(f'[ERROR] Architecture not supported yet!')
            exit(1)            
        

def launch_k_x64(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    if args.kernel_image == None:
        args.kernel_image = khelper_config.kernel_dir.joinpath("/arch/x86_64/boot/bzImage")
    if args.debug:
        commands = [
            "qemu-system-x86_64 -s -smp 2 -kernel " + str(args.kernel_image) + " -initrd " + str(args.file_system) + " -append \"console=ttyS0 init=/init\" -k en-us -nographic"
        ]
    else:
        commands = [
            "qemu-system-x86_64 -smp 2 -kernel " + str(args.kernel_image) + " -initrd " + str(args.file_system) + " -append \"console=ttyS0 init=/init\" -k en-us -nographic"
        ]        
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)
    
def launch_k_i386(khelper_config: KhelperConfig, with_lsp: bool) -> None:
    return 0
            
def launch_k(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    match args.arch:
        case 'x86':
            launch_k_i386(args, khelper_config)
        case 'x86-64':
            launch_k_x64(args, khelper_config)
        case _:
            assert False, "Unreachable code; are you messing up with the memory?"
            
def gdb_run(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    commands = [
        "gdb -ex 'target remote localhost:1234' vmlinux"
    ]
    run_subprocess_in_dir(commands, khelper_config.kernel_dir)

def decompress_initramfs(args: argparse.Namespace, khelper_config: KhelperConfig) -> None:
    target = args.target_directory.joinpath("/initramfs")
    commands = [
        "mkdir -p " + str(args.target_directory) + "/initramfs"
    ]
    run_subprocess_in_dir(commands, Path.cwd())
    commands = [
        "cp " + str(
    ]
    
def main() -> None:
    parser = argparse.ArgumentParser(
        prog="khelper",
        description="`khelper` is a kernel helper that I use to automate some compilation and running tasks in my day-to-day work with the Linux kernel.")

    parser.add_argument("-v", "--verbose", help="Provide exhaustive output logs from all the tools used internally by `khelper`", action="store_true")

    subparsers = parser.add_subparsers(
        title="command", description="command to run", dest="command")

    parser_build = subparsers.add_parser(
        "build",
        help="Build the Linux kernel specified in the khelper configuration file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_build.add_argument("arch", help="Target architecture for which we want to build the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_build.add_argument("-lsp", "--lsp-enable", help="Option on whether to enable LSP support when building the kernel", action="store_true")
    parser_build.set_defaults(func=build_k)

    parser_initramfs = subparsers.add_parser(
        "initramfs",
        help="Build the file system with the Busybox source specified in the khelper configuration file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_initramfs.add_argument("arch", help="Target architecture for which we want to build the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_initramfs.add_argument("-i", "--include", help="List of files to include in the initramfs", type=list_str)
    parser_initramfs.set_defaults(func=build_fs)    

    parser_run = subparsers.add_parser(
        "launch",
        help="Launch the Linux kernel environment using QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_run.add_argument("arch", help="Target architecture for which we want to run the kernel", choices=["x86-64", "x86"], type=str, default="x86-64")
    parser_run.add_argument("-d","--debug", help="Launch QEMU with the `-s` option to allow `gdb` to connect", action="store_true")
    parser_run.add_argument("-k", "--kernel-image", help="Target kernel image (i.e., bzImage) to run in QEMU", type=Path)
    parser_run.add_argument("-f", "--file-system", help="Target initramfs used to run the kernel in QEMU", type=Path, default=Path("/tmp/staging/initramfs-busybox-x86.cpio.gz"))
    parser_run.set_defaults(func=launch_k)

    parser_gdb = subparsers.add_parser(
        "gdb",
        help="Launch `gdb` to debug the Linux kernel running in QEMU",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_gdb.add_argument("-p","--port", help="Port used by `gdb` to connect to the running QEMU instance", type=str, default="1234")
    parser_gdb.set_defaults(func=gdb_run)

    parser_decompress = subparsers.add_parser(
        "decompress",
        help="Decompress an initramfs file from its .gz form",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser_decompress.add_argument("initramfs", help="Initramfs file in gz format to be decompressed", type=Path)
    parser_decompress.add_argument("-d", "--target-directory", help="The directory where to uncompres the initramfs in input", type=Path, default=Path("."))
    parser_decompress.set_defaults(func=decompress_initramfs)

    if len(sys.argv) == 1:
        parser.print_help()
        parser.exit()

    args = parser.parse_args()
    args.func(args, get_khelper_config())

if __name__ == "__main__":
    main()
